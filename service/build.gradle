/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

dependencies {
    api project(':api')

    implementation "org.springframework.cloud:spring-cloud-starter-config"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client"
    implementation "org.springframework.boot:spring-boot-starter-jetty"
    implementation "org.apache.fineract.cn.anubis:library:$frameworkanubisVersion"
    implementation "com.google.code.gson:gson"
    implementation "org.apache.fineract.cn:lang:$frameworklangVersion"
    implementation "org.apache.fineract.cn:async:$frameworkasyncVersion"
    implementation "org.apache.fineract.cn:cassandra:$frameworkcassandraVersion"
    implementation "org.apache.fineract.cn:postgresql:$frameworkpostgresqlVersion"
    implementation "org.apache.fineract.cn:command:$frameworkcommandVersion"
    implementation "org.hibernate:hibernate-validator:$validatorVersion"
    implementation "io.netty:netty-all:4.1.39.Final"
    implementation "io.netty:netty-transport-native-epoll:4.1.39.Final"
}

bootJar {
    enabled = true
    classifier = 'boot'
}

jar {
    enabled = true
}

tasks.withType(PublishToMavenLocal) { task ->
    task.dependsOn 'bootJar'
}

publishing {
    publications {
        service(MavenPublication) {
            from components.java
            groupId project.group
            artifactId project.name
            version project.findProperty('externalVersion') ?: project.version
        }
        bootService(MavenPublication) {
            // "boot" jar
            artifact(file("$buildDir/libs/$project.name-$project.version-${bootJar.classifier}.jar"))
            groupId project.group
            artifactId ("$project.name-boot")
            version project.findProperty('externalVersion') ?: project.version
        }
    }
}
